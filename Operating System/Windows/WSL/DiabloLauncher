#!/bin/bash

checkenv="true"
textStyle="false"

DiabloII="false"
DiabloIII="false"

DiabloLauncher="$(cmd.exe '/c' 'echo %DiabloLauncher%')"

function INPUTFAILED() {
    if [ "$1" == "" ]; then
        echo -n "Unable to start Diablo. Please provide specific installed Diablo version. Exiting..."
    else
        echo -n "Unable to start Diablo version: $1. Please check installed correctly. Exiting..."
    fi
    read
    exit 1
}

function TextStyleController() {
    if [ "$textStyle" == "true" ]; then
        figlet $1
    else
        echo "$1"
    fi
}

function DiabloLaunchAgent() {
    if [ "$program" == "II" -o "$program" == "ii" ]; then
        if [ "$DiabloII" == "false" ]; then
            INPUTFAILED $program
        fi
        clear
        TextStyleController "Diablo II Resurrected"
    elif [ "$program" == "III" -o "$program" == "iii" ]; then
        if [ "$DiabloII" == "false" ]; then
            INPUTFAILED $program
        fi
        clear
        TextStyleController "Diablo III"
    fi

    echo -e "\nBattle.net now launching... The screen resolution will now setting the recommand value."
    resolution $ALTERED_RES_X $ALTERED_RES_Y

    if [ "$program" == "II" -o "$program" == "ii" ]; then
        echo "Please launch Diablo II Resurrected click BLUE PLAY BUTTON..."
        open "$getGameDir/Diablo II Resurrected/Diablo II Resurrected Launcher.exe"
    elif [ "$program" == "III" -o "$program" == "iii" ]; then
        echo "Please launch Diablo III click BLUE PLAY BUTTON..."
        open "$getGameDir/Diablo III/Diablo III Launcher.exe"
    fi

    echo -n "If you want RESETTING NORMAL SCREEN RESOLUTION and STOP THE GAME please PRESS ENTER KEY..."
    read
    echo "The screen resolution will now setting default value."
    resolution $ORIGIN_RES_X $ORIGIN_RES_Y
    exit    
}

echo -n "Checking Windows Terminal (1/9) ... "
if [ ! -x "/mnt/c/Windows/System32/wsl.exe" ]; then
    echo -en "\nUnable to execute screen resolution program. Please install WSL."
    read
    exit 1
fi
echo "Done."

echo -n "Verifying resolution program (2/9) ... "
resolution list &> /dev/null
if [ $? != 0 ]; then
    echo -en "\nUnable to execute screen resolution program. Please install program or check permission."
    read
    exit 1
fi
echo "Done."

echo -n "Checking open helper (3/9) ... "
which open &> /dev/null
if [ $? != 0 ]; then
    echo -en "\nUnable to execute open program. Please install program or check permission."
    read
    exit 1
fi
echo "Done."

echo -n "Checking text styling (4/9) ... "
which figlet &> /dev/null
if [ $? != 0 ]; then
    echo -e "\nWarning figlet package not found. Some text will replaced regacy text and it doesn't show correctly."
    textStyle="false"
else
    textStyle="true"
    echo "Done."
fi

echo -n "Checking Battle.net game directory (5/9) ... "
getGameDir=$(wslpath -u "$(echo $DiabloLauncher | awk -F ';' '{ print $1 }')")
if [ ! -d "$getGameDir" ]; then
    if [ "$getGameDir" == "" ]; then
        echo -e "\nUnable to locate Diablo installed path. Please set System Environment Variable: DiabloLauncher"
        echo "Please set DiabloLauncher like this: GameDir\;OriginX\;OriginY\;AlteredX\;AlteredY"
        echo "DiabloLauncher path example: C:\\Progam Files\\Battle.net\;5120\;2880\;2560\;1440"
    else
        echo -e "\nUnable to locate Diablo installed path: $getGameDir"
    fi
    echo -n "Please check Diablo installed correctly or System Environment Variable."
    read
    exit 1
fi
echo $(wslpath -w "$getGameDir")

echo -n "Verifying Diablo II Resurrected directory (6/9) ... "
if [ ! -d "$getGameDir/Diablo II Resurrected" ]; then
    echo -e "Unable to locate Diablo II Resurrected installed path."
    echo "Please check Diablo II Resurrected installed correctly."
    checkenv="false"
else
    DiabloII="true"
    echo "Done."
fi

echo -n "Verifying Diablo III directory (7/9) ... "
if [ ! -d "$getGameDir/Diablo III" ]; then
    echo -e "Unable to locate Diablo III installed path."
    echo "Please check Diablo III installed correctly."
    checkenv="false"
else
    DiabloIII="true"
    echo "Done."
fi

echo -n "Checking Diablo installed correctly (8/9) ... "
if [ "$DiabloII" == "false" -a "$DiabloIII" == "false" ]; then
    echo -n "Current launchable Diablo not detected. Please install Diablo first. Exiting..."
    read
    exit 1
fi
echo "Done."

echo -n "Checking screen resolution vector (9/9) ... "
ORIGIN_RES_X=$(echo $DiabloLauncher | awk -F ';' '{ print $2 }')
ORIGIN_RES_Y=$(echo $DiabloLauncher | awk -F ';' '{ print $3 }')
ALTERED_RES_X=$(echo $DiabloLauncher | awk -F ';' '{ print $4 }')
ALTERED_RES_Y=$(echo $DiabloLauncher | awk -F ';' '{ print $5 }')
if ! [ "$ORIGIN_RES_X" == "" -o "$ORIGIN_RES_Y" -o "$ALTERED_RES_X" == "" -o "$ALTERED_RES_Y" == "" ]; then
    echo -e "\nUnable to get screen resolution. Please set System Environment Variable: DiabloLauncher"
    echo "Please set DiabloLauncher like this: GameDir\;OriginX\;OriginY\;AlteredX\;AlteredY\;"
    echo "DiabloLauncher path example: C:\\Program Files\\Battle.net\;5120\;2880\;2560\;1440"
else
    echo "$ORIGIN_RES_X x $ORIGIN_RES_Y - $ALTERED_RES_X x $ALTERED_RES_Y"
    echo ""
fi

if [ "$checkenv" == "false" ]; then
    echo -n "Some check returns warning! Please review above output."
    read
    echo "Please wait until init progress is done."
    sleep 1
else
    echo -n "All check passed! Please wait until init progress is done."
    sleep 1
fi
clear

TextStyleController "Diablo Launcher"
echo
echo "Welcome to Diablo Bundle Launcher!"
echo

if [ "$DiabloII" == "true" -a "$DiabloIII" == "true" ]; then
    echo -n "Please choose Diablo version (II, III): "
    read program
elif [ "DiabloII" == "true" -a "$DiabloIII" == "false" ]; then
    echo -n "Please choose Diablo version (III): "
    read program
elif [ "DiabloII" == "false" -a "$DiabloIII" == "true" ]; then
    echo -n "Please choose Diablo version (II): "
    read program
fi

if [ "$program" == "II" -o "$program" == "ii" ]; then
    DiabloLaunchAgent
elif [ "$program" == "III" -o "$program" == "iii" ]; then
    DiabloLaunchAgent
else
    INPUTFAILED $program
fi
