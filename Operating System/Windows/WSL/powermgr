#!/bin/bash

executePath=/mnt/c/Windows/System32
if [ -x $executePath/shutdown.exe -o -x $executePath/rundll32.exe ]; then
    cd $executePath 2> /dev/null
else
    echo "powermgr: fatal error: unable to access daemon. please mount the Windows system volume C:\\."
    exit 1
fi

option=$1
time=$2
comment=$3
chk_time=${time//[0-9]/}

if [ "$option" == "" ]; then
    option="help"
fi

if [ -n "$chk_time" ]; then
    if [ $# == 2 ]; then
        comment=$time
        time=""
    else
        echo "powermgr: unable to $option system due to ambiguous parameters: $time"
        echo "The second parameter should contain the number of seconds."
        exit 1
    fi
fi

function engageTime() {
    result=$(date -d "$2 second")
    echo -e "This system \e[1;37mwill \e[1;31m$1\e[1;37m after\e[m: $result"
}

function engagedTime() {
    echo -e "System \e[1;37mwent to \e[1;31m$1\e[m at: $(date)"
}

function updateConfig() {
    echo "Please wait until updating your config file..."
    engageTime $1 5
    exportCmd="export QUIET_POWERMGR_SEQUENCE=TRUE # powermgr config"
    echo "$exportCmd" >> $2
    if [ $? != 0 ]; then
        echo "Failed to update config file. There are no changes."
        exit 1
    else
        echo "Successfully updated config file."
        echo "NOTE: Please reload your config file like: source $2"
        sleep 5
    fi
}

function executeCmd() {
    if [ "$comment" == "" ]; then
        comment="$USER didn't provided comment. The system $option due to powermgr script."
        echo "NOTE: Empty comment detected. The comment are replaced with the default sentences. "
    fi

    if [ "$time" == "" ]; then
        checkOption $option
        engagedTime $option
        shutdown.exe -$1 -t 0 -c "$comment"
    else
        shutdown.exe -$1 -t $time -c "$comment"
        if [ "$?" == "0" ]; then
            engageTime $option $time
        fi
    fi
}

function checkOption() {
    if [ "$QUIET_POWERMGR_SEQUENCE" != "TRUE" ]; then
        echo -en "Are you sure you want to \e[1;31m$1 \e[1;37mthe system\e[m now? (Y/n/d) > "
        read n
        if [ "$n" == "N" -o "$n" == "n" ]; then
            echo -e "\e[1;31m$1\e[1;37m command aborted\e[m by user."
            exit 2
        elif [ "$n" == "D" -o "$n" == "d" ]; then
            if [ "$SHELL" == "/bin/bash" ]; then
                updateConfig $1 ~/.bashrc
            elif [ "$SHELL" == "/bin/zsh" ]; then
                updateConfig $1 ~/.zshrc
            else
                echo "Unsupported shell ($SHELL). Please paste this command to your config file manually."
                echo "$exportCmd"
                exit 1
            fi
        fi
    fi
}

if [ "$option" == "halt" ]; then
    executeCmd s
elif [ "$option" == "reboot" ]; then
    executeCmd r
elif [ "$option" == "abort" ]; then
    shutdown.exe -a
    if [ "$?" == "0" ]; then
        echo "The schedule has been canceled. Any previously scheduled commands will not be executed."
    fi

elif [ "$option" == "sleep" ]; then
    if [ "$time" == "" ]; then
        checkOption $option
        engageTime $option 10
        sleep 10
        rundll32.exe powrprof.dll SetSuspendState
    else
		result=$(date -d "$time second")
        echo "This command doesn't not support. Please enter this command after $result."
        exit 1
    fi

elif [ "$option" == "help" ]; then
    echo "usage: powermgr <option> [time] [comment]"
    echo -e "    halt: Shut down this computer"
    echo -e "  reboot: Restart this computer"
    echo -e "   abort: Cancel a shutdown or restart schedule"
    echo -e "   sleep: Put this computer to sleep"
    echo -e "    help: Show this help\n"
    echo "NOTE: Some parameters or options have the following restrictions"
    echo "- The time and comment parameter only applies halt and reboot options."
    echo "- The abort option takes effect only when the shutdown or restart is scheduled."
else
    echo "powermgr: command not found: $option"
    echo "   usage: $0 <option> [time] [comment]"
    echo "Use the \"help\" option to display available options"
    exit 1
fi

